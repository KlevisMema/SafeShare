@using Blazored.LocalStorage
@using SafeShare.ClientServices.Interfaces

@inherits LayoutComponentBase
@inject IAuthenticationService authService
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <MudAppBar Elevation="3">

            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudDivider DividerType="DividerType.Inset" />

            <MudTooltip Text="Notifications" Color="Color.Primary" Placement="Placement.Bottom">
                <MudBadge Content="3" Overlap="true" Dot="true" Color="Color.Secondary">
                    <MudIconButton Icon="@Icons.Material.Outlined.Notifications" Color="Color.Inherit" Edge="Edge.End" Title="Notifications" />
                </MudBadge>
            </MudTooltip>

            <MudTooltip Text="Verified" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.VerifiedUser" Color="Color.Inherit" Edge="Edge.End" />
            </MudTooltip>

            <MudTooltip Text="Log Out" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" OnClick="() => LogoutUser()"/>
            </MudTooltip>

        </MudAppBar>

    <MudDrawer @bind-Open="_drawerOpen" Elevation="3" Width="350px">

        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Safe Share</MudText>
        </MudDrawerHeader>

        <NavMenu />

    </MudDrawer>

    <MudMainContent>
        @Body
    </MudMainContent>

</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task LogoutUser()
    {
        _snackbar.Add("Logging you out", Severity.Success, config => { config.CloseAfterNavigation = true; });
        await Task.Delay(2000);
        var userId = await _localStorage.GetItemAsStringAsync("UserData");
        await authService.LogoutUser(Guid.Parse(userId));
        await _localStorage.RemoveItemAsync("UserData");
        _navigationManager.NavigateTo("/Login");
    }
}